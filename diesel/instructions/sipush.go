package instructions

import (
	"../runtime"
	"../../utils"
	"../../types"
			)

type I_sipush struct {
}

func init()  {
	INSTRUCTION_MAP[0x11] = &I_sipush{}
}

func (s I_sipush)Stroke(ctx *runtime.Context) error {
	utils.Log(1, "sipush exce >>>>>>>>>\n")

	value := types.Jint(ctx.Code[ctx.PC]) << 8 | types.Jint(ctx.Code[ctx.PC + 1])
	ctx.PC += 2

	ctx.CurrentFrame.PushFrame(value)
	return nil
}

func (s I_sipush)Test(octx *runtime.Context) *runtime.Context {
	f := new(runtime.Frame)
	f.PushFrame(&types.Jarray{
		Reference: []types.Jbyte{1, 2, 3, 4},
	})
	f.PushFrame(types.Jlong(9))
	f.PushFrame(types.Jlong(9))
	a := new(runtime.Aborigines)
	a.Layers = append(a.Layers, &[]uint32{1234})
	return &runtime.Context{
		Code: []byte{0x0},
		CurrentFrame: f,
		CurrentAborigines: a,
	}
}
/**
======================================================================================
		操作				||		将一个 short 类型数据入栈
======================================================================================
						||		sipush
						||------------------------------------------------------------
						||		byte1
						||------------------------------------------------------------
						||		byte2
		格式				||------------------------------------------------------------
						||		
						||------------------------------------------------------------
						||		
						||------------------------------------------------------------
						||		
======================================================================================
		结构				||		sipush = 17(0x11)
======================================================================================
						||		...，  →
	   操作数栈			||------------------------------------------------------------
						||		„，value
======================================================================================
						||
		描述				||		无符号数byte1和byte2通过(byte1 << 8)| byte2方式构造成一个 short 类型数值，
然后此数值带符号扩展为一个 int 类型的值 value，然后将 value 压入到操作数栈中。
						||
======================================================================================
						||		
	   运行时异常			||
						||
======================================================================================
						||
						||
						||
		注意				||
						||
						||
						||
======================================================================================
 */