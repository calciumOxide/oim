package instructions

import (
	"../runtime"
	"../../utils"
	"../../types"
			)

type I_ret struct {
}

func init()  {
	INSTRUCTION_MAP[0xa9] = &I_ret{}
}

func (s I_ret)Stroke(ctx *runtime.Context) error {
	utils.Log(1, "ret exce >>>>>>>>>\n")

	index := uint32(0)
	if ctx.PopWide() {
		index = uint32(ctx.Code[ctx.PC]) << 8 | uint32(ctx.Code[ctx.PC + 1])
		ctx.PC += 2
	} else {
		index = uint32(ctx.Code[ctx.PC])
		ctx.PC++
	}

	value, _ := ctx.CurrentAborigines.GetAborigines(index)
	ctx.PC = value.(uint32)
	return nil
}

func (s I_ret)Test(octx *runtime.Context) *runtime.Context {
	f := new(runtime.Frame)
	f.PushFrame(&types.Jarray{
		Reference: []types.Jbyte{1, 2, 3, 4},
	})
	f.PushFrame(types.Jlong(9))
	f.PushFrame(types.Jlong(9))
	a := new(runtime.Aborigines)
	a.Layers = append(a.Layers, &[]uint32{1234})
	return &runtime.Context{
		Code: []byte{0x0},
		CurrentFrame: f,
		CurrentAborigines: a,
	}
}
/**
======================================================================================
		操作				||		代码片段中返回
======================================================================================
						||		ret
						||------------------------------------------------------------
						||		index
						||------------------------------------------------------------
						||		
		格式				||------------------------------------------------------------
						||		
						||------------------------------------------------------------
						||		
						||------------------------------------------------------------
						||		
======================================================================================
		结构				||		ret = 169(0xa9)
======================================================================================
						||		...， →
	   操作数栈			||------------------无变化------------------------------------
						||		...， →
======================================================================================
						||
		描述				||		index 是一个 0 至 255 之间的无符号数，它代表一个当前栈帧(§2.6)的 局部变量表的索引值，在该索引位置应为一个 returnAddress 类型的局部变
量，指令执行后，将该局部变量的值更新到 Java 虚拟机的 PC 寄存器中，令 程序从修改后的位置继续执行。

						||
======================================================================================
						||		
						||
	   运行时异常			||
						||
======================================================================================
						||
		注意				||
ret 指令被用来与 jsr、jsr_w 指令一同实现 Java 语言中的 finally 语句 块(参见§3.13“编译 finally 语句块”)。请注意，jsr_w 指令推送 address 到操作数栈，ret 指令从局部变量表中把它取出，这种不对称的操作是故意设
计的。
						||ret 指令不应与 return 指令混为一谈，return 是在没有返回值的方法返回 时使用。
ret 指令可以与 wide 指令联合使用，以实现使用 2 字节宽度的无符号整数作 为索引来访问局部变量表。
						||
						||
======================================================================================
 */