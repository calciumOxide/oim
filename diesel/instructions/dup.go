package instructions

import (
	"../../utils"
	"../oil/types"
	"../runtime"
	"../variator"
)

type I_dup struct {
}

func init() {
	INSTRUCTION_MAP[0x59] = &I_dup{}
}

func (s I_dup) Stroke(ctx *runtime.Context) error {
	utils.Log(1, "dup exce >>>>>>>>>\n")

	value, _ := ctx.CurrentFrame.PeekFrame()
	if runtime.IsDoubleLong(value) {
		except, _ := variator.AllocExcept(variator.InstructionException)
		ctx.Throw(except)
		return nil
	}
	ctx.CurrentFrame.PushFrame(value)
	return nil
}

func (s I_dup) Test() *runtime.Context {
	f := new(runtime.Frame)
	f.PushFrame(&types.Jarray{
		Reference: []types.Jbyte{1, 2, 3, 4},
	})
	f.PushFrame(types.Jdouble(8.123456789012345))
	f.PushFrame(types.Jdouble(9.123456789012345))
	a := new(runtime.Aborigines)
	a.Layers = append(a.Layers, &[]uint32{1234})
	return &runtime.Context{
		Code:              []byte{0x0},
		CurrentFrame:      f,
		CurrentAborigines: a,
	}
}

/**
======================================================================================
		操作				||		复制操作数栈栈顶的值，并插入到栈顶
======================================================================================
						||		dup
						||------------------------------------------------------------
						||
						||------------------------------------------------------------
						||
		格式				||------------------------------------------------------------
						||
						||------------------------------------------------------------
						||
						||------------------------------------------------------------
						||
======================================================================================
		结构				||		dup = 89(0x59)
======================================================================================
						||		...，value，value →
	   操作数栈			||------------------------------------------------------------
						||		...，value
======================================================================================
						||
		描述				||		复制操作数栈栈顶的值，并将此值压入到操作数栈顶。
						||		如果 value 不是§2.11.1 的表 2.3 中列出的分类一中的数据类型，就不能使用 dup 指令来复制栈顶值。
						||
======================================================================================
						||
						||
						||
	   运行时异常			||
						||
						||
						||
======================================================================================
						||
						||
						||
		注意				||
						||
						||
						||
======================================================================================
*/
